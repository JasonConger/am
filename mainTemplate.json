{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "defaultValue": "[resourceGroup().location]",
        "type": "string",
        "metadata": {
          "description": "Azure region for deployed Splunk resources"
        }
      },
      "linuxUserName": {
        "type": "string",
        "defaultValue": "splunkadmin",
        "metadata": {
          "description": "Linux admin username for the Virtual Machine"
        }
      },
      "authenticationType": {
        "type": "string",
        "defaultValue": "sshPublicKey",
        "allowedValues": [
          "sshPublicKey",
          "password"
        ],
        "metadata": {
          "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
        }
      },
      "linuxPasswordOrKey": {
        "type": "securestring",
        "metadata": {
          "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
        }
      },
        "vmName": {
        "type": "string",
        "defaultValue": "splunk-lm-vm",
        "metadata": {
          "description": "Name for the Virtual Machine."
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "Size for the Virtual Machine."
        }
      },
      "storageNewOrExisting": {
        "type": "string",
        "defaultValue": "new",
        "allowedValues": [
          "new",
          "existing"
        ],
        "metadata": {
          "description": "Determines whether or not a new storage account should be provisioned."
        }
      },
      "storageAccountName": {
        "type": "string",
        "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "Name of the storage account"
        }
      },
      "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "metadata": {
          "description": "Storage account type"
        }
      },
      "storageAccountResourceGroupName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "Name of the resource group for the existing storage account"
        }
      },
      "virtualNetworkNewOrExisting": {
        "type": "string",
        "defaultValue": "new",
        "allowedValues": [
          "new",
          "existing"
        ],
        "metadata": {
          "description": "Determines whether or not a new virtual network should be provisioned."
        }
      },
      "virtualNetworkName": {
        "type": "string",
        "defaultValue": "VirtualNetwork",
        "metadata": {
          "description": "Name of the virtual network"
        }
      },
      "addressPrefixes": {
        "type": "array",
        "defaultValue": [
          "10.0.0.0/16"
        ],
        "metadata": {
          "description": "Address prefix of the virtual network"
        }
      },
      "subnetName": {
        "type": "string",
        "defaultValue": "default",
        "metadata": {
          "description": "Name of the subnet"
        }
      },
      "subnetPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/24",
        "metadata": {
          "description": "Subnet prefix of the virtual network"
        }
      },
      "virtualNetworkResourceGroupName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "Name of the resource group for the existing virtual network"
        }
      },
      "publicIpNewOrExisting": {
        "type": "string",
        "defaultValue": "new",
        "allowedValues": [
          "none",
          "new",
          "existing"
        ],
        "metadata": {
          "description": "Determines whether or not a new public ip should be provisioned."
        }
      },
      "publicIpName": {
        "type": "string",
        "defaultValue": "PublicIp",
        "metadata": {
          "description": "Name of the public ip address"
        }
      },
      "publicIpDns": {
        "type": "string",
        "defaultValue": "[concat('linux-vm-', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "DNS of the public ip address for the VM"
        }
      },
      "publicIpResourceGroupName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "Name of the resource group for the public ip address"
        }
      },
      "publicIpAllocationMethod": {
        "type": "string",
        "defaultValue": "Static",
        "allowedValues": [
          "Dynamic",
          "Static",
          ""
        ],
        "metadata": {
          "description": "Allocation method for the public ip address"
        }
      },
      "publicIpSku": {
        "type": "string",
        "defaultValue": "Basic",
        "allowedValues": [
          "Basic",
          "Standard",
          ""
        ],
        "metadata": {
          "description": "Name of the resource group for the public ip address"
        }
      },
      "splunkUser": {
        "type": "string",
        "defaultValue": "admin",
        "metadata": {
          "description": "Splunk user name to use during Splunk install"
        }
      },
      "splunkPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Splunk password to use during Splunk install"
        }
      },
      "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/'"
            }
      },
      "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated.  Use the defaultValue if the staging location is not secured."
            }
        }
    },
    "variables": {
      "scenarioPrefix": "splunk-lm-",
      "imagePublisher": "splunk",
      "imageOffer": "splunk-vm-preview",
      "imageSku": "splunk-on-ubuntu-20-04",
      "imageVersion": "9.0.5",
      "nsgName": "[concat(variables('scenarioPrefix'),'nsg')]",
      "nicName": "[concat(variables('scenarioPrefix'),'nic')]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[concat('/home/', parameters('linuxUserName'), '/.ssh/authorized_keys')]",
              "keyData": "[parameters('linuxPasswordOrKey')]"
            }
          ]
        }
      },
        "publicIpAddressId": {
        "id": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
      }
    },
    "resources": [
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2022-05-01",
        "name": "[variables('nsgName')]",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "Port_8000",
              "properties": {
                "description": "Access to Splunk Web",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "8000",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "Port_8089",
              "properties": {
                "description": "Access to Splunk management port",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "8089",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 125,
                "direction": "Inbound"
              }
            },
            {
              "name": "Port_22",
              "properties": {
                "description": "SSH access to VMs",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 200,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "condition": "[equals(parameters('storageNewOrExisting'), 'new')]",
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-06-01",
        "name": "[parameters('storageAccountName')]",
        "location": "[parameters('location')]",
        "kind": "Storage",
        "sku": {
          "name": "[parameters('storageAccountType')]"
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
        "apiVersion": "2020-05-01",
        "name": "[parameters('publicIpName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[parameters('publicIpSku')]"
        },    
        "properties": {
          "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
          "dnsSettings": {
            "domainNameLabel": "[parameters('publicIpDns')]"
          }
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
        "apiVersion": "2020-05-01",
        "name": "[parameters('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": "[parameters('addressPrefixes')]"
          },
          "subnets": [
            {
              "name": "[parameters('subnetName')]",
              "properties": {
                "addressPrefix": "[parameters('subnetPrefix')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-05-01",
        "name": "[variables('nicName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[parameters('publicIpName')]",
          "[parameters('virtualNetworkName')]",
          "[variables('nsgName')]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]"
                },
                "publicIPAddress": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId') , json('null'))]"
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2022-03-01",
        "name": "[parameters('vmName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[parameters('storageAccountName')]",
          "[variables('nicName')]"
        ],
        "plan": {
          "name": "[variables('imageSku')]",
          "product": "[variables('imageOffer')]",
          "publisher": "[variables('imagePublisher')]"
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "osProfile": {
            "computerName": "[parameters('vmName')]",
            "adminUsername": "[parameters('linuxUserName')]",
            "adminPassword": "[parameters('linuxPasswordOrKey')]",
            "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[variables('imageSku')]",
              "version": "[variables('imageVersion')]"
            },
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": 64,
              "osType": "Linux"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2018-02-01').primaryEndpoints.blob]"
          }
        }
        },
        "resources": [
          {
            "apiVersion": "2020-06-01",
            "type": "extensions",
            "name": "config-app",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[parameters('vmName')]"
            ],
            "properties": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[uri(parameters('_artifactsLocation'), concat('scripts/configure.sh', parameters('_artifactsLocationSasToken')))]"
                ]
              },
              "protectedSettings": {
                "commandToExecute": "[concat('sudo bash configure.sh --splunk-user ', parameters('splunkUser'), ' --splunk-password ', parameters('splunkPassword'))]"
              }
            }
          }
        ]
      }
    ],
    "outputs": {
      "ssh-command": {
        "type": "string",
        "value": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), 'no public ip, vnet access only', concat('ssh ', parameters('linuxUserName'), '@', reference(resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2018-04-01').dnsSettings.fqdn))]"
      }
    }
}